(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _easingJs = require('./easing.js');

var _easingJs2 = _interopRequireDefault(_easingJs);

var _MorphingSliderJs = require('./MorphingSlider.js');

var _MorphingSliderJs2 = _interopRequireDefault(_MorphingSliderJs);

var _MorphingImageJs = require('./MorphingImage.js');

var _MorphingImageJs2 = _interopRequireDefault(_MorphingImageJs);

var img1 = document.getElementById('model1');
var img2 = document.getElementById('model2');
img2.onload = init;

d3.select('#transform-easing-select').selectAll('option').data(Object.keys(_easingJs2['default'])).enter().append('option').attr('value', function (d) {
    return d;
}).html(function (d) {
    return d;
});
d3.select('#alpha-easing-select').selectAll('option').data(Object.keys(_easingJs2['default'])).enter().append('option').attr('value', function (d) {
    return d;
}).html(function (d) {
    return d;
});

function init() {

    var points = [new createjs.Point(0, 0), new createjs.Point(img1.width, 0), new createjs.Point(img1.width, img1.height), new createjs.Point(0, img1.height), new createjs.Point(img1.width / 2, img1.height / 2)];

    var points2 = [new createjs.Point(0, 0), new createjs.Point(img2.width, 0), new createjs.Point(img2.width, img2.height), new createjs.Point(0, img2.height), new createjs.Point(img2.width / 2, img2.height / 2)];

    var faces = createFaces(points);
    var faces2 = createFaces(points2);
    var stage = new createjs.Stage('mycanvas');
    var mi = new _MorphingImageJs2['default'](img1, points, faces, stage);
    var mi2 = new _MorphingImageJs2['default'](img2, points2, faces2, stage);
    var ms = new _MorphingSliderJs2['default']();
    ms.addImage(mi);
    ms.addImage(mi2);
    drawPoint();

    var playButton = document.getElementById('play-button');
    playButton.addEventListener('click', function () {
        if (ms.isAnimating) {
            return false;
        }
        ms.clear();
        mi = new _MorphingImageJs2['default'](img1, points, faces, stage);
        mi2 = new _MorphingImageJs2['default'](img2, points2, faces2, stage);
        ms.addImage(mi);
        ms.addImage(mi2);
        ms.play();
    });

    img1.addEventListener('click', function (e) {
        var rect = e.target.getBoundingClientRect();
        var point = new createjs.Point(e.clientX - rect.left, e.clientY - rect.top);
        points.push(point);
        points2.push(point.clone());
        faces = createFaces(points);
        faces2 = createFaces(points2);
        drawPoint();
    });

    function drawPoint() {
        d3.select('#container1 .points').selectAll('div').data(points).enter().append('div').style('left', function (d) {
            return d.x + 'px';
        }).style('top', function (d) {
            return d.y + 'px';
        }).call(d3.behavior.drag().on('drag', function (d, i) {
            points[i].x = d3.event.x;
            points[i].y = d3.event.y;
            d3.select(this).style('left', points[i].x + 'px').style('top', points[i].y + 'px');
        }));
        d3.select('#container2 .points').selectAll('div').data(points2).enter().append('div').style('left', function (d) {
            return d.x + 'px';
        }).style('top', function (d) {
            return d.y + 'px';
        }).call(d3.behavior.drag().on('drag', function (d, i) {
            points2[i].x = d3.event.x;
            points2[i].y = d3.event.y;
            d3.select(this).style('left', points2[i].x + 'px').style('top', points2[i].y + 'px');
        }));
    }

    //イージングの切り替え
    document.getElementById('transform-easing-select').addEventListener('change', function () {
        ms.transformEasing = this.options[this.selectedIndex].value;
    });
    document.getElementById('alpha-easing-select').addEventListener('change', function () {
        ms.alphaEasing = this.options[this.selectedIndex].value;
    });

    //アニメーション時間の設定
    var dulationInput = document.getElementById('dulation-input');
    dulationInput.value = ms.dulation;
    document.getElementById('dulation-button').addEventListener('click', function () {
        ms.dulation = dulationInput.value;
    });
}

function createFaces(points) {
    //ボロノイ変換関数
    var voronoi = d3.geom.voronoi().x(function (d) {
        return d.x;
    }).y(function (d) {
        return d.y;
    });

    //ドロネー座標データ取得
    var faces = voronoi.triangles(points);
    faces.forEach(function (face, index) {
        faces[index] = [points.indexOf(faces[index][0]), points.indexOf(faces[index][1]), points.indexOf(faces[index][2])];
    });

    return faces;
}

},{"./MorphingImage.js":2,"./MorphingSlider.js":3,"./easing.js":4}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MorphingImage = (function () {
    function MorphingImage(image, points, faces, stage) {
        _classCallCheck(this, MorphingImage);

        this.domElement = image;
        this.stage = stage;

        this.originalPoints = points;
        this.points = []; //描画する際の動的な座標
        this._clonePoints();

        this.faces = faces;

        this.bitmaps = [];
        this._addBitmaps();
    }

    _createClass(MorphingImage, [{
        key: "_clonePoints",
        value: function _clonePoints() {
            var _this = this;

            this.originalPoints.forEach(function (point, index) {
                //対応する座標を保持する
                _this.points[index] = point.clone();
            });
        }
    }, {
        key: "_addBitmaps",
        value: function _addBitmaps() {
            var _this2 = this;

            this.faces.forEach(function (face) {
                var bmp = new createjs.Bitmap(_this2.domElement);
                var shape = new createjs.Shape();
                shape.graphics.moveTo(_this2.points[face[0]].x, _this2.points[face[0]].y).lineTo(_this2.points[face[1]].x, _this2.points[face[1]].y).lineTo(_this2.points[face[2]].x, _this2.points[face[2]].y);
                bmp.mask = shape;
                _this2.bitmaps.push(bmp);
                _this2.stage.addChild(bmp);
            });
        }
    }, {
        key: "setAlpha",
        value: function setAlpha(a) {
            var _this3 = this;

            this.bitmaps.forEach(function (bmp, index) {
                _this3.bitmaps[index].alpha = a;
            });
        }
    }, {
        key: "update",
        value: function update() {
            var _this4 = this;

            //アフィン変換行列を求め、パーツを描画
            this.faces.forEach(function (face, index) {
                var points1 = [_this4.originalPoints[face[0]], _this4.originalPoints[face[1]], _this4.originalPoints[face[2]]];
                var points2 = [_this4.points[face[0]], _this4.points[face[1]], _this4.points[face[2]]];
                var matrix = _this4._getAffineTransform(points1, points2);
                _this4.bitmaps[index].transformMatrix = _this4.bitmaps[index].mask.transformMatrix = matrix;
            });
            this.stage.update();
        }
    }, {
        key: "_getAffineTransform",
        value: function _getAffineTransform(points1, points2) {
            var a, b, c, d, tx, ty;

            // 連立方程式を解く
            a = (points2[0].x * points1[1].y + points2[1].x * points1[2].y + points2[2].x * points1[0].y - points2[0].x * points1[2].y - points2[1].x * points1[0].y - points2[2].x * points1[1].y) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);
            b = (points2[0].y * points1[1].y + points2[1].y * points1[2].y + points2[2].y * points1[0].y - points2[0].y * points1[2].y - points2[1].y * points1[0].y - points2[2].y * points1[1].y) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);
            c = (points1[0].x * points2[1].x + points1[1].x * points2[2].x + points1[2].x * points2[0].x - points1[0].x * points2[2].x - points1[1].x * points2[0].x - points1[2].x * points2[1].x) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);
            d = (points1[0].x * points2[1].y + points1[1].x * points2[2].y + points1[2].x * points2[0].y - points1[0].x * points2[2].y - points1[1].x * points2[0].y - points1[2].x * points2[1].y) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);
            tx = (points1[0].x * points1[1].y * points2[2].x + points1[1].x * points1[2].y * points2[0].x + points1[2].x * points1[0].y * points2[1].x - points1[0].x * points1[2].y * points2[1].x - points1[1].x * points1[0].y * points2[2].x - points1[2].x * points1[1].y * points2[0].x) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);
            ty = (points1[0].x * points1[1].y * points2[2].y + points1[1].x * points1[2].y * points2[0].y + points1[2].x * points1[0].y * points2[1].y - points1[0].x * points1[2].y * points2[1].y - points1[1].x * points1[0].y * points2[2].y - points1[2].x * points1[1].y * points2[0].y) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);

            var matrix = new createjs.Matrix2D(a, b, c, d, tx, ty);
            return matrix;
        }
    }]);

    return MorphingImage;
})();

exports["default"] = MorphingImage;
module.exports = exports["default"];

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _easingJs = require("./easing.js");

var _easingJs2 = _interopRequireDefault(_easingJs);

var MorphingSlider = (function () {
    function MorphingSlider() {
        _classCallCheck(this, MorphingSlider);

        this.images = [];
        this.transformEasing = this.alphaEasing = "linear";
        this.dulation = 200;
        this.isAnimating = false;
        return this;
    }

    _createClass(MorphingSlider, [{
        key: "addImage",
        value: function addImage(morphingImage) {
            this.images.push(morphingImage);
            return this;
        }
    }, {
        key: "play",
        value: function play() {
            var _this = this;

            if (this.isAnimating) {
                //アニメーションの重複を防ぐ
                return this;
            }
            var t = 0;
            var total = this.dulation * 60 / 1000;
            var interval = 1000 / 60; //60fps
            var timer = setInterval(function () {
                if (t >= total) {
                    clearInterval(timer);
                    _this.isAnimating = false;
                }

                var e = _easingJs2["default"][_this.transformEasing](t / total);
                _this.images[0].points.forEach(function (point, index) {
                    _this.images[0].points[index].x = _this.images[1].originalPoints[index].x * e + _this.images[0].originalPoints[index].x * (1 - e);
                    _this.images[0].points[index].y = _this.images[1].originalPoints[index].y * e + _this.images[0].originalPoints[index].y * (1 - e);
                    _this.images[1].points[index].x = _this.images[0].originalPoints[index].x * (1 - e) + _this.images[1].originalPoints[index].x * e;
                    _this.images[1].points[index].y = _this.images[0].originalPoints[index].y * (1 - e) + _this.images[1].originalPoints[index].y * e;
                });

                e = _easingJs2["default"][_this.alphaEasing](t / total);
                _this.images[0].setAlpha(1 - e);
                _this.images[1].setAlpha(e);
                _this.images[0].update();
                _this.images[1].update();
                t++;
            }, interval);
            this.isAnimating = true;
            return this;
        }
    }, {
        key: "clear",
        value: function clear() {
            this.images = [];
            return this;
        }
    }]);

    return MorphingSlider;
})();

exports["default"] = MorphingSlider;
module.exports = exports["default"];

},{"./easing.js":4}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var EasingFunctions = {
    // no easing, no acceleration
    linear: function linear(t) {
        return t;
    },
    // accelerating from zero velocity
    easeInQuad: function easeInQuad(t) {
        return t * t;
    },
    // decelerating to zero velocity
    easeOutQuad: function easeOutQuad(t) {
        return t * (2 - t);
    },
    // acceleration until halfway, then deceleration
    easeInOutQuad: function easeInOutQuad(t) {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    },
    // accelerating from zero velocity
    easeInCubic: function easeInCubic(t) {
        return t * t * t;
    },
    // decelerating to zero velocity
    easeOutCubic: function easeOutCubic(t) {
        return --t * t * t + 1;
    },
    // acceleration until halfway, then deceleration
    easeInOutCubic: function easeInOutCubic(t) {
        return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    },
    // accelerating from zero velocity
    easeInQuart: function easeInQuart(t) {
        return t * t * t * t;
    },
    // decelerating to zero velocity
    easeOutQuart: function easeOutQuart(t) {
        return 1 - --t * t * t * t;
    },
    // acceleration until halfway, then deceleration
    easeInOutQuart: function easeInOutQuart(t) {
        return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
    },
    // accelerating from zero velocity
    easeInQuint: function easeInQuint(t) {
        return t * t * t * t * t;
    },
    // decelerating to zero velocity
    easeOutQuint: function easeOutQuint(t) {
        return 1 + --t * t * t * t * t;
    },
    // acceleration until halfway, then deceleration
    easeInOutQuint: function easeInOutQuint(t) {
        return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
    }
};

exports["default"] = EasingFunctions;
module.exports = exports["default"];

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
