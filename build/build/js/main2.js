(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _easingJs = require('./easing.js');

var _easingJs2 = _interopRequireDefault(_easingJs);

var _MorphingSliderJs = require('./MorphingSlider.js');

var _MorphingSliderJs2 = _interopRequireDefault(_MorphingSliderJs);

var _MorphingImageJs = require('./MorphingImage.js');

var _MorphingImageJs2 = _interopRequireDefault(_MorphingImageJs);

var img1 = document.getElementById('model1');
var img2 = document.getElementById('model2');
img2.onload = init;

d3.select('easing-select').selectAll('option').data(_easingJs2['default'].keys).enter().append('option').attr('value', function (d) {
    return d;
}).html(function (d) {
    return d;
});

function init() {

    var points = [new createjs.Point(0, 0), new createjs.Point(img1.width, 0), new createjs.Point(img1.width, img1.height), new createjs.Point(0, img1.height), new createjs.Point(img1.width / 2, img1.height / 2)];

    var points2 = [new createjs.Point(0, 0), new createjs.Point(img2.width, 0), new createjs.Point(img2.width, img2.height), new createjs.Point(0, img2.height), new createjs.Point(img2.width / 2, img2.height / 2)];

    var faces = createFaces(points);
    var faces2 = createFaces(points2);
    var stage = new createjs.Stage('mycanvas');
    var mi = new _MorphingImageJs2['default'](img1, points, faces, stage);
    var mi2 = new _MorphingImageJs2['default'](img2, points2, faces2, stage);
    var ms = new _MorphingSliderJs2['default']();
    ms.addImage(mi);
    ms.addImage(mi2);
    drawPoint();

    var playButton = document.getElementById('play-button');
    playButton.addEventListener('click', function () {
        ms.clear();
        mi = new _MorphingImageJs2['default'](img1, points, faces, stage);
        mi2 = new _MorphingImageJs2['default'](img2, points2, faces2, stage);
        ms.addImage(mi);
        ms.addImage(mi2);
        ms.play();
    });

    img1.addEventListener('click', function (e) {
        var rect = e.target.getBoundingClientRect();
        var point = new createjs.Point(e.clientX - rect.left, e.clientY - rect.top);
        points.push(point);
        points2.push(point.clone());
        faces = createFaces(points);
        faces2 = createFaces(points2);
        drawPoint();
    });

    function drawPoint() {
        d3.select('#container1 .points').selectAll('div').data(points).enter().append('div').style('left', function (d) {
            return d.x + 'px';
        }).style('top', function (d) {
            return d.y + 'px';
        }).call(d3.behavior.drag().on('drag', function (d, i) {
            points[i].x = d3.event.x;
            points[i].y = d3.event.y;
            d3.select(this).style('left', points[i].x + 'px').style('top', points[i].y + 'px');
        }));
        d3.select('#container2 .points').selectAll('div').data(points2).enter().append('div').style('left', function (d) {
            return d.x + 'px';
        }).style('top', function (d) {
            return d.y + 'px';
        }).call(d3.behavior.drag().on('drag', function (d, i) {
            points2[i].x = d3.event.x;
            points2[i].y = d3.event.y;
            d3.select(this).style('left', points2[i].x + 'px').style('top', points2[i].y + 'px');
        }));
    }
}

function createFaces(points) {
    //ボロノイ変換関数
    var voronoi = d3.geom.voronoi().x(function (d) {
        return d.x;
    }).y(function (d) {
        return d.y;
    });

    //ドロネー座標データ取得
    var faces = voronoi.triangles(points);
    faces.forEach(function (face, index) {
        faces[index] = [points.indexOf(faces[index][0]), points.indexOf(faces[index][1]), points.indexOf(faces[index][2])];
    });

    return faces;
}

},{"./MorphingImage.js":2,"./MorphingSlider.js":3,"./easing.js":4}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MorphingImage = (function () {
    function MorphingImage(image, points, faces, stage) {
        _classCallCheck(this, MorphingImage);

        this.domElement = image;
        this.stage = stage;

        this.originalPoints = points;
        this.points = []; //描画する際の動的な座標
        this._clonePoints();

        this.faces = faces;

        this.bitmaps = [];
        this._addBitmaps();
    }

    _createClass(MorphingImage, [{
        key: "_clonePoints",
        value: function _clonePoints() {
            var _this = this;

            this.originalPoints.forEach(function (point, index) {
                //対応する座標を保持する
                _this.points[index] = point.clone();
            });
        }
    }, {
        key: "_addBitmaps",
        value: function _addBitmaps() {
            var _this2 = this;

            this.faces.forEach(function (face) {
                var bmp = new createjs.Bitmap(_this2.domElement);
                var shape = new createjs.Shape();
                shape.graphics.moveTo(_this2.points[face[0]].x, _this2.points[face[0]].y).lineTo(_this2.points[face[1]].x, _this2.points[face[1]].y).lineTo(_this2.points[face[2]].x, _this2.points[face[2]].y);
                bmp.mask = shape;
                _this2.bitmaps.push(bmp);
                _this2.stage.addChild(bmp);
            });
        }
    }, {
        key: "setAlpha",
        value: function setAlpha(a) {
            var _this3 = this;

            this.bitmaps.forEach(function (bmp, index) {
                _this3.bitmaps[index].alpha = a;
            });
        }
    }, {
        key: "update",
        value: function update() {
            var _this4 = this;

            //アフィン変換行列を求め、パーツを描画
            this.faces.forEach(function (face, index) {
                var points1 = [_this4.originalPoints[face[0]], _this4.originalPoints[face[1]], _this4.originalPoints[face[2]]];
                var points2 = [_this4.points[face[0]], _this4.points[face[1]], _this4.points[face[2]]];
                var matrix = _this4._getAffineTransform(points1, points2);
                _this4.bitmaps[index].transformMatrix = _this4.bitmaps[index].mask.transformMatrix = matrix;
            });
            this.stage.update();
        }
    }, {
        key: "_getAffineTransform",
        value: function _getAffineTransform(points1, points2) {
            var a, b, c, d, tx, ty;

            // 連立方程式を解く
            a = (points2[0].x * points1[1].y + points2[1].x * points1[2].y + points2[2].x * points1[0].y - points2[0].x * points1[2].y - points2[1].x * points1[0].y - points2[2].x * points1[1].y) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);
            b = (points2[0].y * points1[1].y + points2[1].y * points1[2].y + points2[2].y * points1[0].y - points2[0].y * points1[2].y - points2[1].y * points1[0].y - points2[2].y * points1[1].y) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);
            c = (points1[0].x * points2[1].x + points1[1].x * points2[2].x + points1[2].x * points2[0].x - points1[0].x * points2[2].x - points1[1].x * points2[0].x - points1[2].x * points2[1].x) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);
            d = (points1[0].x * points2[1].y + points1[1].x * points2[2].y + points1[2].x * points2[0].y - points1[0].x * points2[2].y - points1[1].x * points2[0].y - points1[2].x * points2[1].y) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);
            tx = (points1[0].x * points1[1].y * points2[2].x + points1[1].x * points1[2].y * points2[0].x + points1[2].x * points1[0].y * points2[1].x - points1[0].x * points1[2].y * points2[1].x - points1[1].x * points1[0].y * points2[2].x - points1[2].x * points1[1].y * points2[0].x) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);
            ty = (points1[0].x * points1[1].y * points2[2].y + points1[1].x * points1[2].y * points2[0].y + points1[2].x * points1[0].y * points2[1].y - points1[0].x * points1[2].y * points2[1].y - points1[1].x * points1[0].y * points2[2].y - points1[2].x * points1[1].y * points2[0].y) / (points1[0].x * points1[1].y + points1[1].x * points1[2].y + points1[2].x * points1[0].y - points1[0].x * points1[2].y - points1[1].x * points1[0].y - points1[2].x * points1[1].y);

            var matrix = new createjs.Matrix2D(a, b, c, d, tx, ty);
            return matrix;
        }
    }]);

    return MorphingImage;
})();

exports["default"] = MorphingImage;
module.exports = exports["default"];

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _easingJs = require("./easing.js");

var _easingJs2 = _interopRequireDefault(_easingJs);

var MorphingSlider = (function () {
    function MorphingSlider() {
        _classCallCheck(this, MorphingSlider);

        this.images = [];
        this.easing = linear;
    }

    _createClass(MorphingSlider, [{
        key: "addImage",
        value: function addImage(morphingImage) {
            this.images.push(morphingImage);
        }
    }, {
        key: "play",
        value: function play() {
            var _this = this;

            var t = 0;
            var total = 300;
            var timer = setInterval(function () {
                if (t >= 300) {
                    clearInterval(timer);
                }

                var e = _easingJs2["default"][_this.easing](t / total);

                _this.images[0].points.forEach(function (point, index) {
                    _this.images[0].points[index].x = _this.images[1].originalPoints[index].x * e + _this.images[0].originalPoints[index].x * (1 - e);
                    _this.images[0].points[index].y = _this.images[1].originalPoints[index].y * e + _this.images[0].originalPoints[index].y * (1 - e);
                    _this.images[1].points[index].x = _this.images[0].originalPoints[index].x * (1 - e) + _this.images[1].originalPoints[index].x * e;
                    _this.images[1].points[index].y = _this.images[0].originalPoints[index].y * (1 - e) + _this.images[1].originalPoints[index].y * e;
                });
                console.log(_this.images[0].points[4].original);
                _this.images[0].setAlpha((total - t) / total);
                _this.images[1].setAlpha(t / total);
                _this.images[0].update();
                _this.images[1].update();
                t++;
            }, 6);
        }
    }, {
        key: "setEasing",
        value: function setEasing(easing) {
            this.easing = easing;
        }
    }, {
        key: "clear",
        value: function clear() {
            this.images = [];
        }
    }]);

    return MorphingSlider;
})();

exports["default"] = MorphingSlider;
module.exports = exports["default"];

},{"./easing.js":4}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var EasingFunctions = {
    // no easing, no acceleration
    linear: function linear(t) {
        return t;
    },
    // accelerating from zero velocity
    easeInQuad: function easeInQuad(t) {
        return t * t;
    },
    // decelerating to zero velocity
    easeOutQuad: function easeOutQuad(t) {
        return t * (2 - t);
    },
    // acceleration until halfway, then deceleration
    easeInOutQuad: function easeInOutQuad(t) {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    },
    // accelerating from zero velocity
    easeInCubic: function easeInCubic(t) {
        return t * t * t;
    },
    // decelerating to zero velocity
    easeOutCubic: function easeOutCubic(t) {
        return --t * t * t + 1;
    },
    // acceleration until halfway, then deceleration
    easeInOutCubic: function easeInOutCubic(t) {
        return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
    },
    // accelerating from zero velocity
    easeInQuart: function easeInQuart(t) {
        return t * t * t * t;
    },
    // decelerating to zero velocity
    easeOutQuart: function easeOutQuart(t) {
        return 1 - --t * t * t * t;
    },
    // acceleration until halfway, then deceleration
    easeInOutQuart: function easeInOutQuart(t) {
        return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
    },
    // accelerating from zero velocity
    easeInQuint: function easeInQuint(t) {
        return t * t * t * t * t;
    },
    // decelerating to zero velocity
    easeOutQuint: function easeOutQuint(t) {
        return 1 + --t * t * t * t * t;
    },
    // acceleration until halfway, then deceleration
    easeInOutQuint: function easeInOutQuint(t) {
        return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
    }
};

exports["default"] = EasingFunctions;
module.exports = exports["default"];

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvdXNlcjEvRGVza3RvcC9pbWFnZS1tb3JwaGluZy9zcmMvanMvbWFpbjIuanMiLCIvVXNlcnMvdXNlcjEvRGVza3RvcC9pbWFnZS1tb3JwaGluZy9zcmMvanMvTW9ycGhpbmdJbWFnZS5qcyIsIi9Vc2Vycy91c2VyMS9EZXNrdG9wL2ltYWdlLW1vcnBoaW5nL3NyYy9qcy9Nb3JwaGluZ1NsaWRlci5qcyIsIi9Vc2Vycy91c2VyMS9EZXNrdG9wL2ltYWdlLW1vcnBoaW5nL3NyYy9qcy9lYXNpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O3dCQ0E0QixhQUFhOzs7O2dDQUNkLHFCQUFxQjs7OzsrQkFDdEIsb0JBQW9COzs7O0FBRTlDLElBQUksSUFBSSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0MsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM3QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQzs7QUFFbkIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLHNCQUFnQixJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FDNUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsVUFBUyxDQUFDLEVBQUM7QUFDdkMsV0FBTyxDQUFDLENBQUM7Q0FDWixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQ2YsV0FBTyxDQUFDLENBQUM7Q0FDWixDQUFDLENBQUM7O0FBRVAsU0FBUyxJQUFJLEdBQUc7O0FBRVosUUFBSSxNQUFNLEdBQUcsQ0FDVCxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUN4QixJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFDakMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUMzQyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDbEMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQ3RELENBQUM7O0FBRUYsUUFBSSxPQUFPLEdBQUcsQ0FDVixJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUN4QixJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFDakMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUMzQyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsRUFDbEMsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQ3RELENBQUM7O0FBRUYsUUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hDLFFBQUksTUFBTSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNsQyxRQUFJLEtBQUssR0FBRyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDM0MsUUFBSSxFQUFFLEdBQUcsaUNBQWtCLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFD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Q0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7OztBQUd2QixhQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQztBQUM5VyxhQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQztBQUM5VyxhQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQztBQUM5VyxhQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQztBQUM5VyxjQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQztBQUN6YyxjQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxJQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENB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QUMsQ0FBQyxDQUFBO0tBQUU7O0FBRW5ELGtCQUFjLEVBQUUsd0JBQVUsQ0FBQyxFQUFFO0FBQUUsZUFBTyxDQUFDLEdBQUMsR0FBRSxHQUFHLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFDLENBQUMsR0FBRSxFQUFFLENBQUMsQUFBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBO0tBQUU7O0FBRTFFLGVBQVcsRUFBRSxxQkFBVSxDQUFDLEVBQUU7QUFBRSxlQUFPLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUE7S0FBRTs7QUFFOUMsZ0JBQVksRUFBRSxzQkFBVSxDQUFDLEVBQUU7QUFBRSxlQUFPLENBQUMsR0FBQyxBQUFDLEVBQUUsQ0FBQyxHQUFFLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQTtLQUFFOztBQUVyRCxrQkFBYyxFQUFFLHdCQUFVLENBQUMsRUFBRTtBQUFFLGVBQU8sQ0FBQyxHQUFDLEdBQUUsR0FBRyxFQUFFLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBRyxDQUFDLEdBQUMsRUFBRSxHQUFFLEVBQUUsQ0FBQyxBQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBO0tBQUU7Q0FDbkYsQ0FBQzs7cUJBRWEsZUFBZSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgRWFzaW5nRnVuY3Rpb25zIGZyb20gJy4vZWFzaW5nLmpzJztcbmltcG9ydCBNb3JwaGluZ1NsaWRlciBmcm9tICcuL01vcnBoaW5nU2xpZGVyLmpzJztcbmltcG9ydCBNb3JwaGluZ0ltYWdlIGZyb20gJy4vTW9ycGhpbmdJbWFnZS5qcyc7XG5cbnZhciBpbWcxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb2RlbDFcIik7XG52YXIgaW1nMiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9kZWwyXCIpO1xuaW1nMi5vbmxvYWQgPSBpbml0O1xuXG5kMy5zZWxlY3QoXCJlYXNpbmctc2VsZWN0XCIpLnNlbGVjdEFsbChcIm9wdGlvblwiKS5kYXRhKEVhc2luZ0Z1bmN0aW9ucy5rZXlzKS5lbnRlcigpXG4gICAgLmFwcGVuZChcIm9wdGlvblwiKS5hdHRyKFwidmFsdWVcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH0pLmh0bWwoZnVuY3Rpb24oZCl7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH0pO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuXG4gICAgdmFyIHBvaW50cyA9IFtcbiAgICAgICAgbmV3IGNyZWF0ZWpzLlBvaW50KDAsIDApLFxuICAgICAgICBuZXcgY3JlYXRlanMuUG9pbnQoaW1nMS53aWR0aCwgMCksXG4gICAgICAgIG5ldyBjcmVhdGVqcy5Qb2ludChpbWcxLndpZHRoLCBpbWcxLmhlaWdodCksXG4gICAgICAgIG5ldyBjcmVhdGVqcy5Qb2ludCgwLCBpbWcxLmhlaWdodCksXG4gICAgICAgIG5ldyBjcmVhdGVqcy5Qb2ludChpbWcxLndpZHRoIC8gMiwgaW1nMS5oZWlnaHQgLyAyKVxuICAgIF07XG5cbiAgICB2YXIgcG9pbnRzMiA9IFtcbiAgICAgICAgbmV3IGNyZWF0ZWpzLlBvaW50KDAsIDApLFxuICAgICAgICBuZXcgY3JlYXRlanMuUG9pbnQoaW1nMi53aWR0aCwgMCksXG4gICAgICAgIG5ldyBjcmVhdGVqcy5Qb2ludChpbWcyLndpZHRoLCBpbWcyLmhlaWdodCksXG4gICAgICAgIG5ldyBjcmVhdGVqcy5Qb2ludCgwLCBpbWcyLmhlaWdodCksXG4gICAgICAgIG5ldyBjcmVhdGVqcy5Qb2ludChpbWcyLndpZHRoIC8gMiwgaW1nMi5oZWlnaHQgLyAyKVxuICAgIF07XG5cbiAgICB2YXIgZmFjZXMgPSBjcmVhdGVGYWNlcyhwb2ludHMpO1xuICAgIHZhciBmYWNlczIgPSBjcmVhdGVGYWNlcyhwb2ludHMyKTtcbiAgICB2YXIgc3RhZ2UgPSBuZXcgY3JlYXRlanMuU3RhZ2UoXCJteWNhbnZhc1wiKTtcbiAgICB2YXIgbWkgPSBuZXcgTW9ycGhpbmdJbWFnZShpbWcxLCBwb2ludHMsIGZhY2VzLCBzdGFnZSk7XG4gICAgdmFyIG1pMiA9IG5ldyBNb3JwaGluZ0ltYWdlKGltZzIsIHBvaW50czIsIGZhY2VzMiwgc3RhZ2UpO1xuICAgIHZhciBtcyA9IG5ldyBNb3JwaGluZ1NsaWRlcigpO1xuICAgIG1zLmFkZEltYWdlKG1pKTtcbiAgICBtcy5hZGRJbWFnZShtaTIpO1xuICAgIGRyYXdQb2ludCgpO1xuXG4gICAgdmFyIHBsYXlCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXktYnV0dG9uXCIpO1xuICAgIHBsYXlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbXMuY2xlYXIoKTtcbiAgICAgICAgbWkgPSBuZXcgTW9ycGhpbmdJbWFnZShpbWcxLCBwb2ludHMsIGZhY2VzLCBzdGFnZSk7XG4gICAgICAgIG1pMiA9IG5ldyBNb3JwaGluZ0ltYWdlKGltZzIsIHBvaW50czIsIGZhY2VzMiwgc3RhZ2UpO1xuICAgICAgICBtcy5hZGRJbWFnZShtaSk7XG4gICAgICAgIG1zLmFkZEltYWdlKG1pMik7XG4gICAgICAgIG1zLnBsYXkoKTtcbiAgICB9KTtcblxuICAgIGltZzEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciByZWN0ID0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBwb2ludCA9IG5ldyBjcmVhdGVqcy5Qb2ludChlLmNsaWVudFggLSByZWN0LmxlZnQsIGUuY2xpZW50WSAtIHJlY3QudG9wKTtcbiAgICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICBwb2ludHMyLnB1c2gocG9pbnQuY2xvbmUoKSk7XG4gICAgICAgIGZhY2VzID0gY3JlYXRlRmFjZXMocG9pbnRzKTtcbiAgICAgICAgZmFjZXMyID0gY3JlYXRlRmFjZXMocG9pbnRzMik7XG4gICAgICAgIGRyYXdQb2ludCgpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gZHJhd1BvaW50KCkge1xuICAgICAgICBkMy5zZWxlY3QoXCIjY29udGFpbmVyMSAucG9pbnRzXCIpLnNlbGVjdEFsbChcImRpdlwiKS5kYXRhKHBvaW50cykuZW50ZXIoKS5hcHBlbmQoXCJkaXZcIikuc3R5bGUoXCJsZWZ0XCIsIGZ1bmN0aW9uKGQpe1xuICAgICAgICAgICAgcmV0dXJuIGQueCArIFwicHhcIjtcbiAgICAgICAgfSkuc3R5bGUoXCJ0b3BcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICByZXR1cm4gZC55ICsgXCJweFwiO1xuICAgICAgICB9KS5jYWxsKGQzLmJlaGF2aW9yLmRyYWcoKVxuICAgICAgICAgICAgLm9uKFwiZHJhZ1wiLCBmdW5jdGlvbihkLGkpIHtcbiAgICAgICAgICAgICAgICBwb2ludHNbaV0ueCA9IGQzLmV2ZW50Lng7XG4gICAgICAgICAgICAgICAgcG9pbnRzW2ldLnkgPSBkMy5ldmVudC55O1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImxlZnRcIiwgcG9pbnRzW2ldLnggKyBcInB4XCIpLnN0eWxlKFwidG9wXCIsIHBvaW50c1tpXS55ICsgXCJweFwiKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgZDMuc2VsZWN0KFwiI2NvbnRhaW5lcjIgLnBvaW50c1wiKS5zZWxlY3RBbGwoXCJkaXZcIikuZGF0YShwb2ludHMyKS5lbnRlcigpLmFwcGVuZChcImRpdlwiKS5zdHlsZShcImxlZnRcIiwgZnVuY3Rpb24oZCl7XG4gICAgICAgICAgICByZXR1cm4gZC54ICsgXCJweFwiO1xuICAgICAgICB9KS5zdHlsZShcInRvcFwiLCBmdW5jdGlvbihkKXtcbiAgICAgICAgICAgIHJldHVybiBkLnkgKyBcInB4XCI7XG4gICAgICAgIH0pLmNhbGwoZDMuYmVoYXZpb3IuZHJhZygpXG4gICAgICAgICAgICAub24oXCJkcmFnXCIsIGZ1bmN0aW9uKGQsaSkge1xuICAgICAgICAgICAgICAgIHBvaW50czJbaV0ueCA9IGQzLmV2ZW50Lng7XG4gICAgICAgICAgICAgICAgcG9pbnRzMltpXS55ID0gZDMuZXZlbnQueTtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJsZWZ0XCIsIHBvaW50czJbaV0ueCArIFwicHhcIikuc3R5bGUoXCJ0b3BcIiwgcG9pbnRzMltpXS55ICsgXCJweFwiKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZhY2VzKHBvaW50cykge1xuICAgIC8v44Oc44Ot44OO44Kk5aSJ5o+b6Zai5pWwXG4gICAgdmFyIHZvcm9ub2kgPSBkMy5nZW9tLnZvcm9ub2koKVxuICAgICAgICAueChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQueFxuICAgICAgICB9KVxuICAgICAgICAueShmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQueVxuICAgICAgICB9KTtcblxuICAgIC8v44OJ44Ot44ON44O85bqn5qiZ44OH44O844K/5Y+W5b6XXG4gICAgdmFyIGZhY2VzID0gdm9yb25vaS50cmlhbmdsZXMocG9pbnRzKTtcbiAgICBmYWNlcy5mb3JFYWNoKGZ1bmN0aW9uKGZhY2UsIGluZGV4KXtcbiAgICAgICAgZmFjZXNbaW5kZXhdID0gW1xuICAgICAgICAgICAgcG9pbnRzLmluZGV4T2YoZmFjZXNbaW5kZXhdWzBdKSxcbiAgICAgICAgICAgIHBvaW50cy5pbmRleE9mKGZhY2VzW2luZGV4XVsxXSksXG4gICAgICAgICAgICBwb2ludHMuaW5kZXhPZihmYWNlc1tpbmRleF1bMl0pXG4gICAgICAgIF07XG4gICAgfSlcblxuICAgIHJldHVybiBmYWNlcztcbn0iLCJjbGFzcyBNb3JwaGluZ0ltYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihpbWFnZSwgcG9pbnRzLCBmYWNlcywgc3RhZ2UpIHtcbiAgICAgICAgdGhpcy5kb21FbGVtZW50ID0gaW1hZ2U7XG4gICAgICAgIHRoaXMuc3RhZ2UgPSBzdGFnZTtcblxuICAgICAgICB0aGlzLm9yaWdpbmFsUG9pbnRzID0gcG9pbnRzO1xuICAgICAgICB0aGlzLnBvaW50cyA9IFtdOyAvL+aPj+eUu+OBmeOCi+mam+OBruWLleeahOOBquW6p+aomVxuICAgICAgICB0aGlzLl9jbG9uZVBvaW50cygpO1xuXG4gICAgICAgIHRoaXMuZmFjZXMgPSBmYWNlcztcblxuICAgICAgICB0aGlzLmJpdG1hcHMgPSBbXTtcbiAgICAgICAgdGhpcy5fYWRkQml0bWFwcygpO1xuXG4gICAgfVxuICAgIF9jbG9uZVBvaW50cygpIHtcbiAgICAgICAgdGhpcy5vcmlnaW5hbFBvaW50cy5mb3JFYWNoKChwb2ludCwgaW5kZXgpID0+IHsgLy/lr77lv5zjgZnjgovluqfmqJnjgpLkv53mjIHjgZnjgotcbiAgICAgICAgICAgIHRoaXMucG9pbnRzW2luZGV4XSA9IHBvaW50LmNsb25lKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfYWRkQml0bWFwcygpIHtcbiAgICAgICAgdGhpcy5mYWNlcy5mb3JFYWNoKChmYWNlKSA9PiB7XG4gICAgICAgICAgICB2YXIgYm1wID0gbmV3IGNyZWF0ZWpzLkJpdG1hcCh0aGlzLmRvbUVsZW1lbnQpO1xuICAgICAgICAgICAgdmFyIHNoYXBlID0gbmV3IGNyZWF0ZWpzLlNoYXBlKCk7XG4gICAgICAgICAgICBzaGFwZS5ncmFwaGljcy5tb3ZlVG8odGhpcy5wb2ludHNbZmFjZVswXV0ueCwgdGhpcy5wb2ludHNbZmFjZVswXV0ueSlcbiAgICAgICAgICAgICAgICAubGluZVRvKHRoaXMucG9pbnRzW2ZhY2VbMV1dLngsIHRoaXMucG9pbnRzW2ZhY2VbMV1dLnkpXG4gICAgICAgICAgICAgICAgLmxpbmVUbyh0aGlzLnBvaW50c1tmYWNlWzJdXS54LCB0aGlzLnBvaW50c1tmYWNlWzJdXS55KTtcbiAgICAgICAgICAgIGJtcC5tYXNrID0gc2hhcGU7XG4gICAgICAgICAgICB0aGlzLmJpdG1hcHMucHVzaChibXApO1xuICAgICAgICAgICAgdGhpcy5zdGFnZS5hZGRDaGlsZChibXApO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2V0QWxwaGEoYSkge1xuICAgICAgICB0aGlzLmJpdG1hcHMuZm9yRWFjaCgoYm1wLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5iaXRtYXBzW2luZGV4XS5hbHBoYSA9IGE7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIC8v44Ki44OV44Kj44Oz5aSJ5o+b6KGM5YiX44KS5rGC44KB44CB44OR44O844OE44KS5o+P55S7XG4gICAgICAgIHRoaXMuZmFjZXMuZm9yRWFjaCgoZmFjZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHZhciBwb2ludHMxID0gW3RoaXMub3JpZ2luYWxQb2ludHNbZmFjZVswXV0sIHRoaXMub3JpZ2luYWxQb2ludHNbZmFjZVsxXV0sIHRoaXMub3JpZ2luYWxQb2ludHNbZmFjZVsyXV1dO1xuICAgICAgICAgICAgdmFyIHBvaW50czIgPSBbdGhpcy5wb2ludHNbZmFjZVswXV0sIHRoaXMucG9pbnRzW2ZhY2VbMV1dLCB0aGlzLnBvaW50c1tmYWNlWzJdXV07XG4gICAgICAgICAgICB2YXIgbWF0cml4ID0gdGhpcy5fZ2V0QWZmaW5lVHJhbnNmb3JtKHBvaW50czEsIHBvaW50czIpO1xuICAgICAgICAgICAgdGhpcy5iaXRtYXBzW2luZGV4XS50cmFuc2Zvcm1NYXRyaXggPSB0aGlzLmJpdG1hcHNbaW5kZXhdLm1hc2sudHJhbnNmb3JtTWF0cml4ID0gbWF0cml4O1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGFnZS51cGRhdGUoKTtcbiAgICB9XG4gICAgX2dldEFmZmluZVRyYW5zZm9ybShwb2ludHMxLCBwb2ludHMyKXtcbiAgICAgICAgdmFyIGEsIGIsIGMsIGQsIHR4LCB0eTtcblxuICAgICAgICAvLyDpgKPnq4vmlrnnqIvlvI/jgpLop6PjgY9cbiAgICAgICAgYSA9IChwb2ludHMyWzBdLnggKiBwb2ludHMxWzFdLnkgKyBwb2ludHMyWzFdLnggKiBwb2ludHMxWzJdLnkgKyBwb2ludHMyWzJdLnggKiBwb2ludHMxWzBdLnkgLSBwb2ludHMyWzBdLnggKiBwb2ludHMxWzJdLnkgLSBwb2ludHMyWzFdLnggKiBwb2ludHMxWzBdLnkgLSBwb2ludHMyWzJdLnggKiBwb2ludHMxWzFdLnkpIC8gKHBvaW50czFbMF0ueCAqIHBvaW50czFbMV0ueSArIHBvaW50czFbMV0ueCAqIHBvaW50czFbMl0ueSArIHBvaW50czFbMl0ueCAqIHBvaW50czFbMF0ueSAtIHBvaW50czFbMF0ueCAqIHBvaW50czFbMl0ueSAtIHBvaW50czFbMV0ueCAqIHBvaW50czFbMF0ueSAtIHBvaW50czFbMl0ueCAqIHBvaW50czFbMV0ueSk7XG4gICAgICAgIGIgPSAocG9pbnRzMlswXS55ICogcG9pbnRzMVsxXS55ICsgcG9pbnRzMlsxXS55ICogcG9pbnRzMVsyXS55ICsgcG9pbnRzMlsyXS55ICogcG9pbnRzMVswXS55IC0gcG9pbnRzMlswXS55ICogcG9pbnRzMVsyXS55IC0gcG9pbnRzMlsxXS55ICogcG9pbnRzMVswXS55IC0gcG9pbnRzMlsyXS55ICogcG9pbnRzMVsxXS55KSAvIChwb2ludHMxWzBdLnggKiBwb2ludHMxWzFdLnkgKyBwb2ludHMxWzFdLnggKiBwb2ludHMxWzJdLnkgKyBwb2ludHMxWzJdLnggKiBwb2ludHMxWzBdLnkgLSBwb2ludHMxWzBdLnggKiBwb2ludHMxWzJdLnkgLSBwb2ludHMxWzFdLnggKiBwb2ludHMxWzBdLnkgLSBwb2ludHMxWzJdLnggKiBwb2ludHMxWzFdLnkpO1xuICAgICAgICBjID0gKHBvaW50czFbMF0ueCAqIHBvaW50czJbMV0ueCArIHBvaW50czFbMV0ueCAqIHBvaW50czJbMl0ueCArIHBvaW50czFbMl0ueCAqIHBvaW50czJbMF0ueCAtIHBvaW50czFbMF0ueCAqIHBvaW50czJbMl0ueCAtIHBvaW50czFbMV0ueCAqIHBvaW50czJbMF0ueCAtIHBvaW50czFbMl0ueCAqIHBvaW50czJbMV0ueCkgLyAocG9pbnRzMVswXS54ICogcG9pbnRzMVsxXS55ICsgcG9pbnRzMVsxXS54ICogcG9pbnRzMVsyXS55ICsgcG9pbnRzMVsyXS54ICogcG9pbnRzMVswXS55IC0gcG9pbnRzMVswXS54ICogcG9pbnRzMVsyXS55IC0gcG9pbnRzMVsxXS54ICogcG9pbnRzMVswXS55IC0gcG9pbnRzMVsyXS54ICogcG9pbnRzMVsxXS55KTtcbiAgICAgICAgZCA9IChwb2ludHMxWzBdLnggKiBwb2ludHMyWzFdLnkgKyBwb2ludHMxWzFdLnggKiBwb2ludHMyWzJdLnkgKyBwb2ludHMxWzJdLnggKiBwb2ludHMyWzBdLnkgLSBwb2ludHMxWzBdLnggKiBwb2ludHMyWzJdLnkgLSBwb2ludHMxWzFdLnggKiBwb2ludHMyWzBdLnkgLSBwb2ludHMxWzJdLnggKiBwb2ludHMyWzFdLnkpIC8gKHBvaW50czFbMF0ueCAqIHBvaW50czFbMV0ueSArIHBvaW50czFbMV0ueCAqIHBvaW50czFbMl0ueSArIHBvaW50czFbMl0ueCAqIHBvaW50czFbMF0ueSAtIHBvaW50czFbMF0ueCAqIHBvaW50czFbMl0ueSAtIHBvaW50czFbMV0ueCAqIHBvaW50czFbMF0ueSAtIHBvaW50czFbMl0ueCAqIHBvaW50czFbMV0ueSk7XG4gICAgICAgIHR4ID0gKHBvaW50czFbMF0ueCAqIHBvaW50czFbMV0ueSAqIHBvaW50czJbMl0ueCArIHBvaW50czFbMV0ueCAqIHBvaW50czFbMl0ueSAqIHBvaW50czJbMF0ueCArIHBvaW50czFbMl0ueCAqIHBvaW50czFbMF0ueSAqIHBvaW50czJbMV0ueCAtIHBvaW50czFbMF0ueCAqIHBvaW50czFbMl0ueSAqIHBvaW50czJbMV0ueCAtIHBvaW50czFbMV0ueCAqIHBvaW50czFbMF0ueSAqIHBvaW50czJbMl0ueCAtIHBvaW50czFbMl0ueCAqIHBvaW50czFbMV0ueSAqIHBvaW50czJbMF0ueCkgLyAocG9pbnRzMVswXS54ICogcG9pbnRzMVsxXS55ICsgcG9pbnRzMVsxXS54ICogcG9pbnRzMVsyXS55ICsgcG9pbnRzMVsyXS54ICogcG9pbnRzMVswXS55IC0gcG9pbnRzMVswXS54ICogcG9pbnRzMVsyXS55IC0gcG9pbnRzMVsxXS54ICogcG9pbnRzMVswXS55IC0gcG9pbnRzMVsyXS54ICogcG9pbnRzMVsxXS55KTtcbiAgICAgICAgdHkgPSAocG9pbnRzMVswXS54ICogcG9pbnRzMVsxXS55ICogcG9pbnRzMlsyXS55ICsgcG9pbnRzMVsxXS54ICogcG9pbnRzMVsyXS55ICogcG9pbnRzMlswXS55ICsgcG9pbnRzMVsyXS54ICogcG9pbnRzMVswXS55ICogcG9pbnRzMlsxXS55IC0gcG9pbnRzMVswXS54ICogcG9pbnRzMVsyXS55ICogcG9pbnRzMlsxXS55IC0gcG9pbnRzMVsxXS54ICogcG9pbnRzMVswXS55ICogcG9pbnRzMlsyXS55IC0gcG9pbnRzMVsyXS54ICogcG9pbnRzMVsxXS55ICogcG9pbnRzMlswXS55KSAvIChwb2ludHMxWzBdLnggKiBwb2ludHMxWzFdLnkgKyBwb2ludHMxWzFdLnggKiBwb2ludHMxWzJdLnkgKyBwb2ludHMxWzJdLnggKiBwb2ludHMxWzBdLnkgLSBwb2ludHMxWzBdLnggKiBwb2ludHMxWzJdLnkgLSBwb2ludHMxWzFdLnggKiBwb2ludHMxWzBdLnkgLSBwb2ludHMxWzJdLnggKiBwb2ludHMxWzFdLnkpO1xuXG4gICAgICAgIHZhciBtYXRyaXggPSBuZXcgY3JlYXRlanMuTWF0cml4MkQoYSwgYiwgYywgZCwgdHgsIHR5KTtcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vcnBoaW5nSW1hZ2U7IiwiaW1wb3J0IEVhc2luZ0Z1bmN0aW9ucyBmcm9tIFwiLi9lYXNpbmcuanNcIjtcblxuY2xhc3MgTW9ycGhpbmdTbGlkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmltYWdlcyA9IFtdO1xuICAgICAgICB0aGlzLmVhc2luZyA9IGxpbmVhcjtcbiAgICB9XG4gICAgYWRkSW1hZ2UobW9ycGhpbmdJbWFnZSkge1xuICAgICAgICB0aGlzLmltYWdlcy5wdXNoKG1vcnBoaW5nSW1hZ2UpO1xuICAgIH1cbiAgICBwbGF5KCkge1xuICAgICAgICB2YXIgdCA9IDA7XG4gICAgICAgIHZhciB0b3RhbCA9IDMwMDtcbiAgICAgICAgdmFyIHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgaWYodD49MzAwKXtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGUgPSBFYXNpbmdGdW5jdGlvbnNbdGhpcy5lYXNpbmddKHQvdG90YWwpO1xuXG4gICAgICAgICAgICB0aGlzLmltYWdlc1swXS5wb2ludHMuZm9yRWFjaCgocG9pbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZXNbMF0ucG9pbnRzW2luZGV4XS54ID0gdGhpcy5pbWFnZXNbMV0ub3JpZ2luYWxQb2ludHNbaW5kZXhdLnggKiBlICsgdGhpcy5pbWFnZXNbMF0ub3JpZ2luYWxQb2ludHNbaW5kZXhdLnggKiAoMS1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLmltYWdlc1swXS5wb2ludHNbaW5kZXhdLnkgPSB0aGlzLmltYWdlc1sxXS5vcmlnaW5hbFBvaW50c1tpbmRleF0ueSAqIGUgKyB0aGlzLmltYWdlc1swXS5vcmlnaW5hbFBvaW50c1tpbmRleF0ueSAqICgxLWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuaW1hZ2VzWzFdLnBvaW50c1tpbmRleF0ueCA9IHRoaXMuaW1hZ2VzWzBdLm9yaWdpbmFsUG9pbnRzW2luZGV4XS54ICogKDEtZSkgKyB0aGlzLmltYWdlc1sxXS5vcmlnaW5hbFBvaW50c1tpbmRleF0ueCAqIGU7XG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZXNbMV0ucG9pbnRzW2luZGV4XS55ID0gdGhpcy5pbWFnZXNbMF0ub3JpZ2luYWxQb2ludHNbaW5kZXhdLnkgKiAoMS1lKSArIHRoaXMuaW1hZ2VzWzFdLm9yaWdpbmFsUG9pbnRzW2luZGV4XS55ICogZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5pbWFnZXNbMF0ucG9pbnRzWzRdLm9yaWdpbmFsKTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzWzBdLnNldEFscGhhKCh0b3RhbC10KS90b3RhbCk7XG4gICAgICAgICAgICB0aGlzLmltYWdlc1sxXS5zZXRBbHBoYSh0L3RvdGFsKTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzWzBdLnVwZGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5pbWFnZXNbMV0udXBkYXRlKCk7XG4gICAgICAgICAgICB0Kys7XG4gICAgICAgIH0sIDYpO1xuICAgIH1cbiAgICBzZXRFYXNpbmcoZWFzaW5nKSB7XG4gICAgICAgIHRoaXMuZWFzaW5nID0gZWFzaW5nO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5pbWFnZXMgPSBbXTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vcnBoaW5nU2xpZGVyOyIsInZhciBFYXNpbmdGdW5jdGlvbnMgPSB7XG4gICAgLy8gbm8gZWFzaW5nLCBubyBhY2NlbGVyYXRpb25cbiAgICBsaW5lYXI6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0IH0sXG4gICAgLy8gYWNjZWxlcmF0aW5nIGZyb20gemVybyB2ZWxvY2l0eVxuICAgIGVhc2VJblF1YWQ6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0KnQgfSxcbiAgICAvLyBkZWNlbGVyYXRpbmcgdG8gemVybyB2ZWxvY2l0eVxuICAgIGVhc2VPdXRRdWFkOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdCooMi10KSB9LFxuICAgIC8vIGFjY2VsZXJhdGlvbiB1bnRpbCBoYWxmd2F5LCB0aGVuIGRlY2VsZXJhdGlvblxuICAgIGVhc2VJbk91dFF1YWQ6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0PC41ID8gMip0KnQgOiAtMSsoNC0yKnQpKnQgfSxcbiAgICAvLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG4gICAgZWFzZUluQ3ViaWM6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0KnQqdCB9LFxuICAgIC8vIGRlY2VsZXJhdGluZyB0byB6ZXJvIHZlbG9jaXR5XG4gICAgZWFzZU91dEN1YmljOiBmdW5jdGlvbiAodCkgeyByZXR1cm4gKC0tdCkqdCp0KzEgfSxcbiAgICAvLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cbiAgICBlYXNlSW5PdXRDdWJpYzogZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQ8LjUgPyA0KnQqdCp0IDogKHQtMSkqKDIqdC0yKSooMip0LTIpKzEgfSxcbiAgICAvLyBhY2NlbGVyYXRpbmcgZnJvbSB6ZXJvIHZlbG9jaXR5XG4gICAgZWFzZUluUXVhcnQ6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0KnQqdCp0IH0sXG4gICAgLy8gZGVjZWxlcmF0aW5nIHRvIHplcm8gdmVsb2NpdHlcbiAgICBlYXNlT3V0UXVhcnQ6IGZ1bmN0aW9uICh0KSB7IHJldHVybiAxLSgtLXQpKnQqdCp0IH0sXG4gICAgLy8gYWNjZWxlcmF0aW9uIHVudGlsIGhhbGZ3YXksIHRoZW4gZGVjZWxlcmF0aW9uXG4gICAgZWFzZUluT3V0UXVhcnQ6IGZ1bmN0aW9uICh0KSB7IHJldHVybiB0PC41ID8gOCp0KnQqdCp0IDogMS04KigtLXQpKnQqdCp0IH0sXG4gICAgLy8gYWNjZWxlcmF0aW5nIGZyb20gemVybyB2ZWxvY2l0eVxuICAgIGVhc2VJblF1aW50OiBmdW5jdGlvbiAodCkgeyByZXR1cm4gdCp0KnQqdCp0IH0sXG4gICAgLy8gZGVjZWxlcmF0aW5nIHRvIHplcm8gdmVsb2NpdHlcbiAgICBlYXNlT3V0UXVpbnQ6IGZ1bmN0aW9uICh0KSB7IHJldHVybiAxKygtLXQpKnQqdCp0KnQgfSxcbiAgICAvLyBhY2NlbGVyYXRpb24gdW50aWwgaGFsZndheSwgdGhlbiBkZWNlbGVyYXRpb25cbiAgICBlYXNlSW5PdXRRdWludDogZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQ8LjUgPyAxNip0KnQqdCp0KnQgOiAxKzE2KigtLXQpKnQqdCp0KnQgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRWFzaW5nRnVuY3Rpb25zOyJdfQ==
